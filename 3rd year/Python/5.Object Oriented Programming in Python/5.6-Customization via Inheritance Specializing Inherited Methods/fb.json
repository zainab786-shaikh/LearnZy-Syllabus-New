[
    {
      "id": 1,
      "question": "Inheritance in Python allows a child class to ________ properties and behaviors from a parent class.",
      "options": [
        "inherit",
        "override",
        "extend",
        "modify"
      ],
      "answer": 0
    },
    {
      "id": 2,
      "question": "To customize an inherited method, you use the technique of ________ in the child class.",
      "options": [
        "method overriding",
        "method overloading",
        "method extension",
        "method modification"
      ],
      "answer": 0
    },
    {
      "id": 3,
      "question": "The ________ function is used to call a parent class method from a child class.",
      "options": [
        "super()",
        "self()",
        "parent()",
        "child()"
      ],
      "answer": 0
    },
    {
      "id": 4,
      "question": "Inheritance helps improve code ________ by allowing classes to reuse common logic.",
      "options": [
        "reusability",
        "maintainability",
        "flexibility",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 5,
      "question": "Method overriding allows a child class to provide a specific implementation for a method already defined in its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 0
    },
    {
      "id": 6,
      "question": "In Python, you can use ________ inheritance to create a class that inherits from more than one parent class.",
      "options": [
        "multiple",
        "multilevel",
        "hierarchical",
        "hybrid"
      ],
      "answer": 0
    },
    {
      "id": 7,
      "question": "Multiple inheritance can lead to conflicts, which Python resolves using ________ order (MRO).",
      "options": [
        "method resolution",
        "attribute resolution",
        "class resolution",
        "object resolution"
      ],
      "answer": 0
    },
    {
      "id": 8,
      "question": "To view the method resolution order of a class, you can use the ________ attribute or method.",
      "options": [
        "__mro__ or mro()",
        "__mro__ or mro()",
        "mro() or __mro__",
        "mro() and __mro__"
      ],
      "answer": 0
    },
    {
      "id": 9,
      "question": "Inheritance is useful for creating a hierarchy of classes where one class is a type of ________.",
      "options": [
        "another class",
        "parent class",
        "base class",
        "superclass"
      ],
      "answer": 0
    },
    {
      "id": 10,
      "question": "Method specialization helps improve code ________ by allowing child classes to customize inherited behaviors.",
      "options": [
        "flexibility",
        "reusability",
        "maintainability",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 11,
      "question": "Inheritance in Python allows a child class to ________ properties and behaviors from a parent class.",
      "options": [
        "inherit",
        "override",
        "extend",
        "modify"
      ],
      "answer": 0
    },
    {
      "id": 12,
      "question": "To customize an inherited method, you use the technique of ________ in the child class.",
      "options": [
        "method overriding",
        "method overloading",
        "method extension",
        "method modification"
      ],
      "answer": 0
    },
    {
      "id": 13,
      "question": "The ________ function is used to call a parent class method from a child class.",
      "options": [
        "super()",
        "self()",
        "parent()",
        "child()"
      ],
      "answer": 0
    },
    {
      "id": 14,
      "question": "Inheritance helps improve code ________ by allowing classes to reuse common logic.",
      "options": [
        "reusability",
        "maintainability",
        "flexibility",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 15,
      "question": "Method overriding allows a child class to provide a specific implementation for a method already defined in its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 0
    },
    {
      "id": 16,
      "question": "In Python, you can use ________ inheritance to create a class that inherits from more than one parent class.",
      "options": [
        "multiple",
        "multilevel",
        "hierarchical",
        "hybrid"
      ],
      "answer": 0
    },
    {
      "id": 17,
      "question": "Multiple inheritance can lead to conflicts, which Python resolves using ________ order (MRO).",
      "options": [
        "method resolution",
        "attribute resolution",
        "class resolution",
        "object resolution"
      ],
      "answer": 0
    },
    {
      "id": 18,
      "question": "To view the method resolution order of a class, you can use the ________ attribute or method.",
      "options": [
        "__mro__ or mro()",
        "__mro__ or mro()",
        "mro() or __mro__",
        "mro() and __mro__"
      ],
      "answer": 0
    },
    {
      "id": 19,
      "question": "Inheritance is useful for creating a hierarchy of classes where one class is a type of ________.",
      "options": [
        "another class",
        "parent class",
        "base class",
        "superclass"
      ],
      "answer": 0
    },
    {
      "id": 20,
      "question": "Method specialization helps improve code ________ by allowing child classes to customize inherited behaviors.",
      "options": [
        "flexibility",
        "reusability",
        "maintainability",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 21,
      "question": "Inheritance allows a child class to ________ methods from a parent class and modify them as needed.",
      "options": [
        "inherit",
        "override",
        "extend",
        "modify"
      ],
      "answer": 0
    },
    {
      "id": 22,
      "question": "To partially customize an inherited method, you can use the ________ function to call the parent method.",
      "options": [
        "super()",
        "self()",
        "parent()",
        "child()"
      ],
      "answer": 0
    },
    {
      "id": 23,
      "question": "Inheritance helps improve code ________ by allowing classes to reuse common logic.",
      "options": [
        "reusability",
        "maintainability",
        "flexibility",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 24,
      "question": "Method overriding allows a child class to provide a specific implementation for a method already defined in its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 0
    },
    {
      "id": 25,
      "question": "In Python, you can use ________ inheritance to create a class that inherits from more than one parent class.",
      "options": [
        "multiple",
        "multilevel",
        "hierarchical",
        "hybrid"
      ],
      "answer": 0
    },
    {
      "id": 26,
      "question": "Multiple inheritance can lead to conflicts, which Python resolves using ________ order (MRO).",
      "options": [
        "method resolution",
        "attribute resolution",
        "class resolution",
        "object resolution"
      ],
      "answer": 0
    },
    {
      "id": 27,
      "question": "To view the method resolution order of a class, you can use the ________ attribute or method.",
      "options": [
        "__mro__ or mro()",
        "__mro__ or mro()",
        "mro() or __mro__",
        "mro() and __mro__"
      ],
      "answer": 0
    },
    {
      "id": 28,
      "question": "Inheritance is useful for creating a hierarchy of classes where one class is a type of ________.",
      "options": [
        "another class",
        "parent class",
        "base class",
        "superclass"
      ],
      "answer": 0
    },
    {
      "id": 29,
      "question": "Method specialization helps improve code ________ by allowing child classes to customize inherited behaviors.",
      "options": [
        "flexibility",
        "reusability",
        "maintainability",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 30,
      "question": "Inheritance allows a child class to ________ methods from a parent class and modify them as needed.",
      "options": [
        "inherit",
        "override",
        "extend",
        "modify"
      ],
      "answer": 0
    },
    {
      "id": 31,
      "question": "To partially customize an inherited method, you can use the ________ function to call the parent method.",
      "options": [
        "super()",
        "self()",
        "parent()",
        "child()"
      ],
      "answer": 0
    },
    {
      "id": 32,
      "question": "Inheritance helps improve code ________ by allowing classes to reuse common logic.",
      "options": [
        "reusability",
        "maintainability",
        "flexibility",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 33,
      "question": "Method overriding allows a child class to provide a specific implementation for a method already defined in its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 0
    },
    {
      "id": 34,
      "question": "In Python, you can use ________ inheritance to create a class that inherits from more than one parent class.",
      "options": [
        "multiple",
        "multilevel",
        "hierarchical",
        "hybrid"
      ],
      "answer": 0
    },
    {
      "id": 35,
      "question": "Multiple inheritance can lead to conflicts, which Python resolves using ________ order (MRO).",
      "options": [
        "method resolution",
        "attribute resolution",
        "class resolution",
        "object resolution"
      ],
      "answer": 0
    },
    {
      "id": 36,
      "question": "To view the method resolution order of a class, you can use the ________ attribute or method.",
      "options": [
        "__mro__ or mro()",
        "__mro__ or mro()",
        "mro() or __mro__",
        "mro() and __mro__"
      ],
      "answer": 0
    },
    {
      "id": 37,
      "question": "Inheritance is useful for creating a hierarchy of classes where one class is a type of ________.",
      "options": [
        "another class",
        "parent class",
        "base class",
        "superclass"
      ],
      "answer": 0
    },
    {
      "id": 38,
      "question": "Method specialization helps improve code ________ by allowing child classes to customize inherited behaviors.",
      "options": [
        "flexibility",
        "reusability",
        "maintainability",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 39,
      "question": "Inheritance allows a child class to ________ methods from a parent class and modify them as needed.",
      "options": [
        "inherit",
        "override",
        "extend",
        "modify"
      ],
      "answer": 0
    },
    {
      "id": 40,
      "question": "To partially customize an inherited method, you can use the ________ function to call the parent method.",
      "options": [
        "super()",
        "self()",
        "parent()",
        "child()"
      ],
      "answer": 0
    },
    {
      "id": 41,
      "question": "Inheritance helps improve code ________ by allowing classes to reuse common logic.",
      "options": [
        "reusability",
        "maintainability",
        "flexibility",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 42,
      "question": "Method overriding allows a child class to provide a specific implementation for a method already defined in its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 0
    },
    {
      "id": 43,
      "question": "In Python, you can use ________ inheritance to create a class that inherits from more than one parent class.",
      "options": [
        "multiple",
        "multilevel",
        "hierarchical",
        "hybrid"
      ],
      "answer": 0
    },
    {
      "id": 44,
      "question": "Multiple inheritance can lead to conflicts, which Python resolves using ________ order (MRO).",
      "options": [
        "method resolution",
        "attribute resolution",
        "class resolution",
        "object resolution"
      ],
      "answer": 0
    },
    {
      "id": 45,
      "question": "To view the method resolution order of a class, you can use the ________ attribute or method.",
      "options": [
        "__mro__ or mro()",
        "__mro__ or mro()",
        "mro() or __mro__",
        "mro() and __mro__"
      ],
      "answer": 0
    },
    {
      "id": 46,
      "question": "Inheritance is useful for creating a hierarchy of classes where one class is a type of ________.",
      "options": [
        "another class",
        "parent class",
        "base class",
        "superclass"
      ],
      "answer": 0
    },
    {
      "id": 47,
      "question": "Method specialization helps improve code ________ by allowing child classes to customize inherited behaviors.",
      "options": [
        "flexibility",
        "reusability",
        "maintainability",
        "scalability"
      ],
      "answer": 0
    },
    {
      "id": 48,
      "question": "Inheritance allows a child class to ________ methods from a parent class and modify them as needed.",
      "options": [
        "inherit",
        "override",
        "extend",
        "modify"
      ],
      "answer": 0
    },
    {
      "id": 49,
      "question": "To partially customize an inherited method, you can use the ________ function to call the parent method.",
      "options": [
        "super()",
        "self()",
        "parent()",
        "child()"
      ],
      "answer": 0
    },
    {
      "id": 50,
      "question": "Inheritance helps improve code ________ by allowing classes to reuse common logic.",
      "options": [
        "reusability",
        "maintainability",
        "flexibility",
        "scalability"
      ],
      "answer": 0
    }
]
  