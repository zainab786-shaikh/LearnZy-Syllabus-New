[
    {
      "id": 1,
      "question": "What is inheritance in Python?",
      "options": [
        "A mechanism to create a new class from an existing class",
        "A way to combine multiple classes into one",
        "A method to hide internal details of a class",
        "A technique to create objects without classes"
      ],
      "answer": 1
    },
    {
      "id": 2,
      "question": "How do you implement inheritance in Python?",
      "options": [
        "By using the extends keyword",
        "By using the class DerivedClass(BaseClass) syntax",
        "By importing modules",
        "By defining functions"
      ],
      "answer": 2
    },
    {
      "id": 3,
      "question": "What types of inheritance exist in Python?",
      "options": [
        "Only single inheritance",
        "Single, multiple, multilevel, hierarchical, and hybrid inheritance",
        "Only multiple inheritance",
        "Only multilevel inheritance"
      ],
      "answer": 2
    },
    {
      "id": 4,
      "question": "What is the purpose of using the super() function in inheritance?",
      "options": [
        "To call a method from the child class",
        "To call a method from the parent class",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 5,
      "question": "Can you use inheritance to reduce code duplication?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 6,
      "question": "What is composition in Python?",
      "options": [
        "A class contains an object of another class as an attribute",
        "A class inherits from another class",
        "A method to hide internal details of a class",
        "A technique to create objects without classes"
      ],
      "answer": 1
    },
    {
      "id": 7,
      "question": "How do you implement composition in Python?",
      "options": [
        "By using inheritance",
        "By creating an object of one class inside another class",
        "By importing modules",
        "By defining functions"
      ],
      "answer": 2
    },
    {
      "id": 8,
      "question": "What is the difference between inheritance and composition?",
      "options": [
        "Inheritance is a 'has-a' relationship, composition is an 'is-a' relationship",
        "Inheritance is an 'is-a' relationship, composition is a 'has-a' relationship",
        "Both are the same thing",
        "Inheritance is used for hiding data, composition is not"
      ],
      "answer": 2
    },
    {
      "id": 9,
      "question": "Can you use composition to improve code modularity?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 10,
      "question": "What is the benefit of using inheritance in object-oriented programming?",
      "options": [
        "It reduces reusability and modularity",
        "It increases reusability and modularity by creating a hierarchy",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 11,
      "question": "Can you use inheritance to improve code readability?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 12,
      "question": "What is the purpose of using multiple inheritance in Python?",
      "options": [
        "To inherit from only one parent class",
        "To inherit from more than one parent class",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 13,
      "question": "Can you use composition to avoid unnecessary inheritance?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 14,
      "question": "What happens if two parent classes in multiple inheritance have the same method name?",
      "options": [
        "It throws an error",
        "It calls the method from the first parent class",
        "It calls the method from the last parent class",
        "It does nothing"
      ],
      "answer": 2
    },
    {
      "id": 15,
      "question": "Can you use inheritance to improve code maintainability?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 16,
      "question": "What is the effect of using multilevel inheritance in Python?",
      "options": [
        "It creates a chain of classes where a child class inherits from another child class",
        "It allows a child class to inherit from only one parent class",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 1
    },
    {
      "id": 17,
      "question": "Can you use composition to improve code flexibility?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 18,
      "question": "What is the purpose of using hierarchical inheritance in Python?",
      "options": [
        "To allow multiple child classes to inherit from a single parent class",
        "To allow a child class to inherit from only one parent class",
        "To import modules",
        "To define functions"
      ],
      "answer": 1
    },
    {
      "id": 19,
      "question": "Can you use inheritance to simplify complex tasks?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 20,
      "question": "What is the benefit of using composition in object-oriented programming?",
      "options": [
        "It reduces modularity and flexibility",
        "It increases modularity and flexibility by allowing objects to work together",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 21,
      "question": "Can you use inheritance to improve code security?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 22,
      "question": "What is the purpose of using hybrid inheritance in Python?",
      "options": [
        "To combine multiple types of inheritance",
        "To inherit from only one parent class",
        "To import modules",
        "To define functions"
      ],
      "answer": 1
    },
    {
      "id": 23,
      "question": "Can you use composition to handle different data types?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 24,
      "question": "What happens if you try to inherit from a class without defining it?",
      "options": [
        "It throws an error",
        "It does nothing",
        "It creates the class automatically",
        "It imports a module"
      ],
      "answer": 1
    },
    {
      "id": 25,
      "question": "Can you use inheritance to improve code efficiency?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 26,
      "question": "What is the effect of using inheritance in modular programming?",
      "options": [
        "It makes code more complex",
        "It breaks down code into smaller reusable modules with a hierarchy",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 27,
      "question": "Can you use composition to improve code maintainability by organizing related data and behavior?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 28,
      "question": "What is the purpose of using the Method Resolution Order (MRO) in multiple inheritance?",
      "options": [
        "To determine the order of method calls in multiple inheritance",
        "To import modules",
        "To define functions",
        "To create classes"
      ],
      "answer": 1
    },
    {
      "id": 29,
      "question": "Can you use inheritance to handle exceptions?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 30,
      "question": "What is the benefit of using inheritance in real-world applications?",
      "options": [
        "It reduces reusability and modularity",
        "It increases reusability and modularity by creating a hierarchy",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 31,
      "question": "Can you use composition to improve code flexibility by allowing different objects to work together?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 32,
      "question": "What happens if you try to access a method that is not defined in the inheritance hierarchy?",
      "options": [
        "It throws an error",
        "It does nothing",
        "It creates the method automatically",
        "It imports a module"
      ],
      "answer": 1
    },
    {
      "id": 33,
      "question": "Can you use inheritance to reduce debugging time?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 34,
      "question": "What is the effect of using inheritance in object-oriented programming?",
      "options": [
        "It makes code more procedural",
        "It creates a hierarchy of classes for better organization",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 35,
      "question": "Can you use composition to improve code maintainability by reducing interdependencies?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 36,
      "question": "What is the purpose of using inheritance in team projects?",
      "options": [
        "To make code more complex",
        "To divide workload by creating a hierarchy of classes",
        "To define variables",
        "To import modules"
      ],
      "answer": 2
    },
    {
      "id": 37,
      "question": "Can you use composition to handle different scenarios based on input?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 38,
      "question": "What happens if you try to inherit from a class that does not exist?",
      "options": [
        "It throws an error",
        "It does nothing",
        "It creates the class automatically",
        "It imports a module"
      ],
      "answer": 1
    },
    {
      "id": 39,
      "question": "Can you use inheritance to improve code security by restricting access?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 40,
      "question": "What is the benefit of using composition in real-world applications?",
      "options": [
        "It reduces modularity and flexibility",
        "It increases modularity and flexibility by allowing objects to work together",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 41,
      "question": "Can you use inheritance to improve code efficiency by reducing repetition?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 42,
      "question": "What is the effect of using composition in modular programming?",
      "options": [
        "It makes code more complex",
        "It breaks down code into smaller reusable modules with loose relationships",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 43,
      "question": "Can you use inheritance to handle exceptions by isolating sensitive data?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 44,
      "question": "What is the purpose of using inheritance in object-oriented programming?",
      "options": [
        "To make code more procedural",
        "To create a hierarchy of classes for better organization",
        "To define variables",
        "To import modules"
      ],
      "answer": 2
    },
    {
      "id": 45,
      "question": "Can you use composition to improve code flexibility by providing different implementations?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 46,
      "question": "What happens if you try to access a method that is not defined in the inheritance hierarchy?",
      "options": [
        "It throws an error",
        "It does nothing",
        "It creates the method automatically",
        "It imports a module"
      ],
      "answer": 1
    },
    {
      "id": 47,
      "question": "Can you use inheritance to simplify complex tasks by creating a hierarchy?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 48,
      "question": "What is the benefit of using composition in real-world applications like game development?",
      "options": [
        "It reduces modularity and flexibility",
        "It increases modularity and flexibility by allowing objects to work together",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 49,
      "question": "Can you use inheritance to improve code maintainability by organizing related data and behavior?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 50,
      "question": "Can you use composition to improve code security by hiding internal implementation?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    }
]
  