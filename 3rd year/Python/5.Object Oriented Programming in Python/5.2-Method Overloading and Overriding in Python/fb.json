[
    {
      "id": 1,
      "question": "Method overloading in Python is not directly supported, but you can achieve similar behavior using ________ arguments or *args.",
      "options": [
        "default",
        "variable",
        "optional",
        "required"
      ],
      "answer": 1
    },
    {
      "id": 2,
      "question": "Method overloading involves creating multiple methods with the same name but different ________ or types of parameters.",
      "options": [
        "numbers",
        "types",
        "sets",
        "parameters"
      ],
      "answer": 4
    },
    {
      "id": 3,
      "question": "In Python, method overloading is typically achieved by using ________ to make some parameters optional.",
      "options": [
        "default arguments",
        "variable arguments",
        "optional arguments",
        "required arguments"
      ],
      "answer": 1
    },
    {
      "id": 4,
      "question": "The *args syntax in Python allows a method to accept a ________ number of arguments.",
      "options": [
        "fixed",
        "variable",
        "dynamic",
        "static"
      ],
      "answer": 2
    },
    {
      "id": 5,
      "question": "Method overriding in Python allows a child class to redefine a method from its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 6,
      "question": "In method overriding, the method name in the child class must be the same as in the ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 7,
      "question": "The super() function in Python is used to call a method from the ________ class within a child class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 8,
      "question": "Method overloading and method overriding are both used in ________ programming.",
      "options": [
        "object-oriented",
        "procedural",
        "functional",
        "scripting"
      ],
      "answer": 1
    },
    {
      "id": 9,
      "question": "Method overloading is not directly supported in Python because it is a ________ typed language.",
      "options": [
        "statically",
        "dynamically",
        "weakly",
        "strongly"
      ],
      "answer": 2
    },
    {
      "id": 10,
      "question": "To simulate method overloading in Python, you can use ________ arguments or conditional logic within a single method.",
      "options": [
        "default",
        "variable",
        "optional",
        "required"
      ],
      "answer": 1
    },
    {
      "id": 11,
      "question": "Method overloading involves creating multiple methods with the same name but different ________ or types of parameters.",
      "options": [
        "numbers",
        "types",
        "sets",
        "parameters"
      ],
      "answer": 4
    },
    {
      "id": 12,
      "question": "In Python, method overloading is typically achieved by using ________ to make some parameters optional.",
      "options": [
        "default arguments",
        "variable arguments",
        "optional arguments",
        "required arguments"
      ],
      "answer": 1
    },
    {
      "id": 13,
      "question": "The *args syntax in Python allows a method to accept a ________ number of arguments.",
      "options": [
        "fixed",
        "variable",
        "dynamic",
        "static"
      ],
      "answer": 2
    },
    {
      "id": 14,
      "question": "Method overriding in Python allows a child class to redefine a method from its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 15,
      "question": "In method overriding, the method name in the child class must be the same as in the ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 16,
      "question": "The super() function in Python is used to call a method from the ________ class within a child class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 17,
      "question": "Method overloading and method overriding are both used in ________ programming.",
      "options": [
        "object-oriented",
        "procedural",
        "functional",
        "scripting"
      ],
      "answer": 1
    },
    {
      "id": 18,
      "question": "Method overloading is not directly supported in Python because it is a ________ typed language.",
      "options": [
        "statically",
        "dynamically",
        "weakly",
        "strongly"
      ],
      "answer": 2
    },
    {
      "id": 19,
      "question": "To simulate method overloading in Python, you can use ________ arguments or conditional logic within a single method.",
      "options": [
        "default",
        "variable",
        "optional",
        "required"
      ],
      "answer": 1
    },
    {
      "id": 20,
      "question": "Method overloading involves creating multiple methods with the same name but different ________ or types of parameters.",
      "options": [
        "numbers",
        "types",
        "sets",
        "parameters"
      ],
      "answer": 4
    },
    {
      "id": 21,
      "question": "In Python, method overloading is typically achieved by using ________ to make some parameters optional.",
      "options": [
        "default arguments",
        "variable arguments",
        "optional arguments",
        "required arguments"
      ],
      "answer": 1
    },
    {
      "id": 22,
      "question": "The *args syntax in Python allows a method to accept a ________ number of arguments.",
      "options": [
        "fixed",
        "variable",
        "dynamic",
        "static"
      ],
      "answer": 2
    },
    {
      "id": 23,
      "question": "Method overriding in Python allows a child class to redefine a method from its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 24,
      "question": "In method overriding, the method name in the child class must be the same as in the ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 25,
      "question": "The super() function in Python is used to call a method from the ________ class within a child class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 26,
      "question": "Method overloading and method overriding are both used in ________ programming.",
      "options": [
        "object-oriented",
        "procedural",
        "functional",
        "scripting"
      ],
      "answer": 1
    },
    {
      "id": 27,
      "question": "Method overloading is not directly supported in Python because it is a ________ typed language.",
      "options": [
        "statically",
        "dynamically",
        "weakly",
        "strongly"
      ],
      "answer": 2
    },
    {
      "id": 28,
      "question": "To simulate method overloading in Python, you can use ________ arguments or conditional logic within a single method.",
      "options": [
        "default",
        "variable",
        "optional",
        "required"
      ],
      "answer": 1
    },
    {
      "id": 29,
      "question": "Method overloading involves creating multiple methods with the same name but different ________ or types of parameters.",
      "options": [
        "numbers",
        "types",
        "sets",
        "parameters"
      ],
      "answer": 4
    },
    {
      "id": 30,
      "question": "In Python, method overloading is typically achieved by using ________ to make some parameters optional.",
      "options": [
        "default arguments",
        "variable arguments",
        "optional arguments",
        "required arguments"
      ],
      "answer": 1
    },
    {
      "id": 31,
      "question": "The *args syntax in Python allows a method to accept a ________ number of arguments.",
      "options": [
        "fixed",
        "variable",
        "dynamic",
        "static"
      ],
      "answer": 2
    },
    {
      "id": 32,
      "question": "Method overriding in Python allows a child class to redefine a method from its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 33,
      "question": "In method overriding, the method name in the child class must be the same as in the ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 34,
      "question": "The super() function in Python is used to call a method from the ________ class within a child class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 35,
      "question": "Method overloading and method overriding are both used in ________ programming.",
      "options": [
        "object-oriented",
        "procedural",
        "functional",
        "scripting"
      ],
      "answer": 1
    },
    {
      "id": 36,
      "question": "Method overloading is not directly supported in Python because it is a ________ typed language.",
      "options": [
        "statically",
        "dynamically",
        "weakly",
        "strongly"
      ],
      "answer": 2
    },
    {
      "id": 37,
      "question": "To simulate method overloading in Python, you can use ________ arguments or conditional logic within a single method.",
      "options": [
        "default",
        "variable",
        "optional",
        "required"
      ],
      "answer": 1
    },
    {
      "id": 38,
      "question": "Method overloading involves creating multiple methods with the same name but different ________ or types of parameters.",
      "options": [
        "numbers",
        "types",
        "sets",
        "parameters"
      ],
      "answer": 4
    },
    {
      "id": 39,
      "question": "In Python, method overloading is typically achieved by using ________ to make some parameters optional.",
      "options": [
        "default arguments",
        "variable arguments",
        "optional arguments",
        "required arguments"
      ],
      "answer": 1
    },
    {
      "id": 40,
      "question": "The *args syntax in Python allows a method to accept a ________ number of arguments.",
      "options": [
        "fixed",
        "variable",
        "dynamic",
        "static"
      ],
      "answer": 2
    },
    {
      "id": 41,
      "question": "Method overriding in Python allows a child class to redefine a method from its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 42,
      "question": "In method overriding, the method name in the child class must be the same as in the ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 43,
      "question": "The super() function in Python is used to call a method from the ________ class within a child class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    },
    {
      "id": 44,
      "question": "Method overloading and method overriding are both used in ________ programming.",
      "options": [
        "object-oriented",
        "procedural",
        "functional",
        "scripting"
      ],
      "answer": 1
    },
    {
      "id": 45,
      "question": "Method overloading is not directly supported in Python because it is a ________ typed language.",
      "options": [
        "statically",
        "dynamically",
        "weakly",
        "strongly"
      ],
      "answer": 2
    },
    {
      "id": 46,
      "question": "To simulate method overloading in Python, you can use ________ arguments or conditional logic within a single method.",
      "options": [
        "default",
        "variable",
        "optional",
        "required"
      ],
      "answer": 1
    },
    {
      "id": 47,
      "question": "Method overloading involves creating multiple methods with the same name but different ________ or types of parameters.",
      "options": [
        "numbers",
        "types",
        "sets",
        "parameters"
      ],
      "answer": 4
    },
    {
      "id": 48,
      "question": "In Python, method overloading is typically achieved by using ________ to make some parameters optional.",
      "options": [
        "default arguments",
        "variable arguments",
        "optional arguments",
        "required arguments"
      ],
      "answer": 1
    },
    {
      "id": 49,
      "question": "The *args syntax in Python allows a method to accept a ________ number of arguments.",
      "options": [
        "fixed",
        "variable",
        "dynamic",
        "static"
      ],
      "answer": 2
    },
    {
      "id": 50,
      "question": "Method overriding in Python allows a child class to redefine a method from its ________ class.",
      "options": [
        "parent",
        "child",
        "sibling",
        "grandparent"
      ],
      "answer": 1
    }
]
  