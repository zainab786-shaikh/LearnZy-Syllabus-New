[
    {
      "id": 1,
      "question": "It is true that Python supports method overloading like Java or C++.",
      "answer": false
    },
    {
      "id": 2,
      "question": "It is true that Python does not support method overloading directly.",
      "answer": true
    },
    {
      "id": 3,
      "question": "It is true that method overloading in Python can be achieved using default arguments.",
      "answer": true
    },
    {
      "id": 4,
      "question": "It is true that method overloading in Python cannot be achieved using default arguments.",
      "answer": false
    },
    {
      "id": 5,
      "question": "It is true that *args can be used to simulate method overloading in Python.",
      "answer": true
    },
    {
      "id": 6,
      "question": "It is true that *args cannot be used to simulate method overloading in Python.",
      "answer": false
    },
    {
      "id": 7,
      "question": "It is true that method overriding in Python allows a child class to redefine a parent class method.",
      "answer": true
    },
    {
      "id": 8,
      "question": "It is true that method overriding in Python does not allow a child class to redefine a parent class method.",
      "answer": false
    },
    {
      "id": 9,
      "question": "It is true that method overriding in Python requires the method name in the child class to be the same as in the parent class.",
      "answer": true
    },
    {
      "id": 10,
      "question": "It is true that method overriding in Python does not require the method name in the child class to be the same as in the parent class.",
      "answer": false
    },
    {
      "id": 11,
      "question": "It is true that the super() function in Python is used to call the parent class method from a child class.",
      "answer": true
    },
    {
      "id": 12,
      "question": "It is true that the super() function in Python is not used to call the parent class method from a child class.",
      "answer": false
    },
    {
      "id": 13,
      "question": "It is true that method overloading and method overriding are both supported in Python.",
      "answer": false
    },
    {
      "id": 14,
      "question": "It is true that method overriding is fully supported in Python, but method overloading is not.",
      "answer": true
    },
    {
      "id": 15,
      "question": "It is true that method overloading and method overriding serve different purposes in object-oriented programming.",
      "answer": true
    },
    {
      "id": 16,
      "question": "It is true that method overloading and method overriding serve the same purpose in object-oriented programming.",
      "answer": false
    },
    {
      "id": 17,
      "question": "It is true that method overloading in Python can be achieved by using different function names.",
      "answer": true
    },
    {
      "id": 18,
      "question": "It is true that method overloading in Python cannot be achieved by using different function names.",
      "answer": false
    },
    {
      "id": 19,
      "question": "It is true that method overriding in Python is useful for providing customized behavior in subclasses.",
      "answer": true
    },
    {
      "id": 20,
      "question": "It is true that method overriding in Python is not useful for providing customized behavior in subclasses.",
      "answer": false
    },
    {
      "id": 21,
      "question": "It is true that Python's lack of direct method overloading is compensated by its dynamic typing and flexible argument handling.",
      "answer": true
    },
    {
      "id": 22,
      "question": "It is true that Python's lack of direct method overloading is not compensated by its dynamic typing and flexible argument handling.",
      "answer": false
    },
    {
      "id": 23,
      "question": "It is true that method overloading in Python can be simulated using conditional logic within a single method.",
      "answer": true
    },
    {
      "id": 24,
      "question": "It is true that method overloading in Python cannot be simulated using conditional logic within a single method.",
      "answer": false
    },
    {
      "id": 25,
      "question": "It is true that method overriding in Python helps in code reusability and flexibility.",
      "answer": true
    },
    {
      "id": 26,
      "question": "It is true that method overriding in Python does not help in code reusability and flexibility.",
      "answer": false
    },
    {
      "id": 27,
      "question": "It is true that method overloading and overriding are essential concepts in object-oriented programming.",
      "answer": true
    },
    {
      "id": 28,
      "question": "It is true that method overloading and overriding are not essential concepts in object-oriented programming.",
      "answer": false
    },
    {
      "id": 29,
      "question": "It is true that Python's approach to method overloading is more flexible due to its dynamic nature.",
      "answer": true
    },
    {
      "id": 30,
      "question": "It is true that Python's approach to method overloading is less flexible due to its dynamic nature.",
      "answer": false
    },
    {
      "id": 31,
      "question": "It is true that method overriding in Python can be used to extend the functionality of a parent class.",
      "answer": true
    },
    {
      "id": 32,
      "question": "It is true that method overriding in Python cannot be used to extend the functionality of a parent class.",
      "answer": false
    },
    {
      "id": 33,
      "question": "It is true that method overloading in Python can be achieved using variable-length arguments (*kwargs).",
      "answer": true
    },
    {
      "id": 34,
      "question": "It is true that method overloading in Python cannot be achieved using variable-length arguments (*kwargs).",
      "answer": false
    },
    {
      "id": 35,
      "question": "It is true that Python's method overriding is useful in scenarios where different classes need to handle similar methods differently.",
      "answer": true
    },
    {
      "id": 36,
      "question": "It is true that Python's method overriding is not useful in scenarios where different classes need to handle similar methods differently.",
      "answer": false
    },
    {
      "id": 37,
      "question": "It is true that method overloading and overriding are used in real-world applications like GUI design and game development.",
      "answer": true
    },
    {
      "id": 38,
      "question": "It is true that method overloading and overriding are not used in real-world applications like GUI design and game development.",
      "answer": false
    },
    {
      "id": 39,
      "question": "It is true that Python's dynamic typing allows for flexible method definitions without strict overloading.",
      "answer": true
    },
    {
      "id": 40,
      "question": "It is true that Python's dynamic typing does not allow for flexible method definitions without strict overloading.",
      "answer": false
    },
    {
      "id": 41,
      "question": "It is true that method overriding in Python can be used to provide a different implementation of a method in a subclass.",
      "answer": true
    },
    {
      "id": 42,
      "question": "It is true that method overriding in Python cannot be used to provide a different implementation of a method in a subclass.",
      "answer": false
    },
    {
      "id": 43,
      "question": "It is true that Python's approach to method overloading is more about convenience than necessity.",
      "answer": true
    },
    {
      "id": 44,
      "question": "It is true that Python's approach to method overloading is more about necessity than convenience.",
      "answer": false
    },
    {
      "id": 45,
      "question": "It is true that method overloading and overriding are important for writing robust and maintainable code in Python.",
      "answer": true
    },
    {
      "id": 46,
      "question": "It is true that method overloading and overriding are not important for writing robust and maintainable code in Python.",
      "answer": false
    },
    {
      "id": 47,
      "question": "It is true that Python's method overriding allows for polymorphism.",
      "answer": true
    },
    {
      "id": 48,
      "question": "It is true that Python's method overriding does not allow for polymorphism.",
      "answer": false
    },
    {
      "id": 49,
      "question": "It is true that method overloading in Python can be simulated using different function names.",
      "answer": true
    },
    {
      "id": 50,
      "question": "It is true that method overloading in Python cannot be simulated using different function names.",
      "answer": false
    }
]
  