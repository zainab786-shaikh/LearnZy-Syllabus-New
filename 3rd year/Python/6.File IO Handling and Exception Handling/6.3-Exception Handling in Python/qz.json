[
    {
      "id": 1,
      "question": "What happens if an exception occurs in Python and is not handled?",
      "options": [
        "The program continues normally",
        "The program stops immediately and displays an error message",
        "It does nothing",
        "It imports a module"
      ],
      "answer": 2
    },
    {
      "id": 2,
      "question": "How do you handle exceptions in Python?",
      "options": [
        "Using the try-except statement",
        "Using the print() function",
        "Using the input() function",
        "Using the int() function"
      ],
      "answer": 1
    },
    {
      "id": 3,
      "question": "What is the purpose of the try block in exception handling?",
      "options": [
        "To handle exceptions",
        "To test a block of code for errors",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 4,
      "question": "What is the purpose of the except block in exception handling?",
      "options": [
        "To test a block of code for errors",
        "To handle exceptions",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 5,
      "question": "Can you use multiple except blocks to handle different types of exceptions?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 6,
      "question": "What is the effect of using the raise statement in Python?",
      "options": [
        "It stops the program without raising an exception",
        "It intentionally raises an exception",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 7,
      "question": "How do you create a user-defined exception in Python?",
      "options": [
        "By defining a new class that inherits from the Exception class",
        "By using the try-except statement",
        "By importing modules",
        "By defining functions"
      ],
      "answer": 1
    },
    {
      "id": 8,
      "question": "What is the purpose of the finally block in exception handling?",
      "options": [
        "To handle exceptions",
        "To execute code regardless of whether an exception occurred",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 9,
      "question": "Can you use the finally block to ensure cleanup operations?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 10,
      "question": "What is the benefit of using exception handling in Python?",
      "options": [
        "It reduces program reliability",
        "It increases program reliability by preventing crashes",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 11,
      "question": "Can you use exception handling to improve code maintainability?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 12,
      "question": "What happens if you try to divide by zero without handling the exception?",
      "options": [
        "It throws a ZeroDivisionError",
        "It does nothing",
        "It imports a module",
        "It prints a message"
      ],
      "answer": 1
    },
    {
      "id": 13,
      "question": "Can you use exception handling to handle different scenarios based on input?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 14,
      "question": "What is the purpose of using the raise statement in real-world applications?",
      "options": [
        "To stop the program without raising an exception",
        "To enforce rules or conditions in a program",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 15,
      "question": "Can you use exception handling to improve code readability?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 16,
      "question": "What is the effect of using multiple except blocks?",
      "options": [
        "It reduces flexibility in handling exceptions",
        "It allows handling different types of exceptions separately",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 17,
      "question": "Can you use exception handling to handle exceptions by isolating sensitive data?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 18,
      "question": "What is the benefit of using the finally block in exception handling?",
      "options": [
        "It reduces code reliability",
        "It ensures cleanup operations are executed regardless of exceptions",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 19,
      "question": "Can you use exception handling to improve code security?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 20,
      "question": "What is the purpose of using user-defined exceptions in Python?",
      "options": [
        "To handle built-in exceptions",
        "To create custom exceptions for specific scenarios",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 21,
      "question": "Can you use exception handling to reduce debugging time?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 22,
      "question": "What is the effect of using the try-except statement in modular programming?",
      "options": [
        "It makes code more complex",
        "It breaks down code into smaller reusable modules with error handling",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 23,
      "question": "Can you use exception handling to improve code efficiency?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 24,
      "question": "What is the purpose of using the raise statement in object-oriented programming?",
      "options": [
        "To make code more procedural",
        "To intentionally raise exceptions for specific conditions",
        "To define variables",
        "To import modules"
      ],
      "answer": 2
    },
    {
      "id": 25,
      "question": "Can you use exception handling to handle different data types?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 26,
      "question": "What happens if you try to handle an exception without using an except block?",
      "options": [
        "It throws an error",
        "It does nothing",
        "It creates an exception automatically",
        "It imports a module"
      ],
      "answer": 1
    },
    {
      "id": 27,
      "question": "Can you use exception handling to improve code flexibility?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 28,
      "question": "What is the benefit of using exception handling in real-world applications?",
      "options": [
        "It reduces program reliability",
        "It increases program reliability by preventing crashes",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 29,
      "question": "Can you use exception handling to improve code maintainability by organizing related data and behavior?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 30,
      "question": "What is the effect of using the finally block in exception handling?",
      "options": [
        "It reduces code reliability",
        "It ensures cleanup operations are executed regardless of exceptions",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 31,
      "question": "Can you use exception handling to improve code security by restricting unauthorized access?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 32,
      "question": "What is the purpose of using the else block in exception handling?",
      "options": [
        "To handle exceptions",
        "To execute code when no exceptions occur",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 33,
      "question": "Can you use exception handling to handle exceptions by isolating sensitive data?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 34,
      "question": "What is the benefit of using user-defined exceptions in real-world applications?",
      "options": [
        "It reduces flexibility in error handling",
        "It increases flexibility by allowing custom error messages",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 35,
      "question": "Can you use exception handling to simplify complex tasks?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 36,
      "question": "What is the effect of using multiple except blocks to handle different exceptions?",
      "options": [
        "It reduces flexibility in exception handling",
        "It allows handling different types of exceptions separately",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 37,
      "question": "Can you use exception handling to improve code readability by organizing error handling?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 38,
      "question": "What is the purpose of using the finally block in real-world applications?",
      "options": [
        "To handle exceptions",
        "To ensure cleanup operations are executed regardless of exceptions",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 39,
      "question": "Can you use exception handling to improve code flexibility by providing different error handling scenarios?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 40,
      "question": "What is the benefit of using exception handling in object-oriented programming?",
      "options": [
        "It makes code more procedural",
        "It creates a hierarchy of classes with error handling",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 41,
      "question": "Can you use exception handling to handle exceptions by isolating sensitive data?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 42,
      "question": "What is the effect of using the raise statement in exception handling?",
      "options": [
        "It stops the program without raising an exception",
        "It intentionally raises an exception",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 43,
      "question": "Can you use exception handling to improve code maintainability by organizing related data and behavior?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 44,
      "question": "What is the purpose of using the else block in exception handling?",
      "options": [
        "To handle exceptions",
        "To execute code when no exceptions occur",
        "To import modules",
        "To define functions"
      ],
      "answer": 2
    },
    {
      "id": 45,
      "question": "Can you use exception handling to improve code security by restricting unauthorized access?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 46,
      "question": "What is the benefit of using user-defined exceptions in real-world applications like banking systems?",
      "options": [
        "It reduces flexibility in error handling",
        "It increases flexibility by allowing custom error messages",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 47,
      "question": "Can you use exception handling to simplify complex tasks by organizing error handling?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 48,
      "question": "What is the effect of using multiple except blocks to handle different exceptions?",
      "options": [
        "It reduces flexibility in exception handling",
        "It allows handling different types of exceptions separately",
        "It does nothing",
        "It throws an error"
      ],
      "answer": 2
    },
    {
      "id": 49,
      "question": "Can you use exception handling to improve code readability by organizing error handling?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    },
    {
      "id": 50,
      "question": "Can you use exception handling to improve code maintainability by organizing related data and behavior?",
      "options": [
        "Yes",
        "No",
        "Only with specific methods",
        "Only with specific functions"
      ],
      "answer": 1
    }
]
  