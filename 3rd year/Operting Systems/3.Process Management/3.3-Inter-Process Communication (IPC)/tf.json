[
    {
      "id": 1,
      "question": "Inter-Process Communication (IPC) allows multiple processes to communicate with each other.",
      "answer": true
    },
    {
      "id": 2,
      "question": "IPC is not necessary for multi-core and distributed computing systems.",
      "answer": false
    },
    {
      "id": 3,
      "question": "Shared memory IPC allows multiple processes to read and write data in a common memory space.",
      "answer": true
    },
    {
      "id": 4,
      "question": "Message passing IPC involves direct memory sharing between processes.",
      "answer": false
    },
    {
      "id": 5,
      "question": "Synchronization is a challenge in shared memory IPC because multiple processes can modify data simultaneously.",
      "answer": true
    },
    {
      "id": 6,
      "question": "Message passing IPC is generally more secure than shared memory IPC.",
      "answer": true
    },
    {
      "id": 7,
      "question": "Shared memory IPC is faster than message passing IPC.",
      "answer": true
    },
    {
      "id": 8,
      "question": "In synchronous message passing, the sender does not wait for an acknowledgment from the receiver.",
      "answer": false
    },
    {
      "id": 9,
      "question": "Asynchronous message passing allows the sender to continue execution without waiting for the receiver to acknowledge the message.",
      "answer": true
    },
    {
      "id": 10,
      "question": "Google Docs is an example of IPC where multiple users edit a document simultaneously.",
      "answer": true
    },
    {
      "id": 11,
      "question": "In shared memory IPC, one process creates a shared memory segment that others can attach to.",
      "answer": true
    },
    {
      "id": 12,
      "question": "Message passing IPC is less structured than shared memory IPC.",
      "answer": false
    },
    {
      "id": 13,
      "question": "An ATM transaction is an example of IPC where the ATM process communicates with the bank server process.",
      "answer": true
    },
    {
      "id": 14,
      "question": "Shared memory IPC is best suited for large data exchange.",
      "answer": true
    },
    {
      "id": 15,
      "question": "Message passing IPC is preferred when processes need to exchange large amounts of data quickly.",
      "answer": false
    },
    {
      "id": 16,
      "question": "In message passing IPC, messages must always be delivered in order.",
      "answer": false
    },
    {
      "id": 17,
      "question": "Security risks in shared memory IPC arise because processes have direct access to shared data.",
      "answer": true
    },
    {
      "id": 18,
      "question": "Message passing IPC has lower overhead than shared memory IPC.",
      "answer": false
    },
    {
      "id": 19,
      "question": "Inter-process communication is only used in distributed systems.",
      "answer": false
    },
    {
      "id": 20,
      "question": "Processes using shared memory IPC need to synchronize access to prevent conflicts.",
      "answer": true
    },
    {
      "id": 21,
      "question": "Message passing IPC eliminates the need for synchronization mechanisms like semaphores.",
      "answer": true
    },
    {
      "id": 22,
      "question": "In shared memory IPC, processes communicate using a common file system instead of memory segments.",
      "answer": false
    },
    {
      "id": 23,
      "question": "IPC is required for processes to share resources and coordinate tasks.",
      "answer": true
    },
    {
      "id": 24,
      "question": "A walkie-talkie conversation is similar to message passing IPC.",
      "answer": true
    },
    {
      "id": 25,
      "question": "In shared memory IPC, a process cannot read memory written by another process.",
      "answer": false
    },
    {
      "id": 26,
      "question": "A chat application using a server to relay messages between users is an example of IPC.",
      "answer": true
    },
    {
      "id": 27,
      "question": "A process can both send and receive messages in message passing IPC.",
      "answer": true
    },
    {
      "id": 28,
      "question": "Message passing IPC is unsuitable for distributed systems.",
      "answer": false
    },
    {
      "id": 29,
      "question": "In shared memory IPC, the operating system automatically synchronizes access to memory.",
      "answer": false
    },
    {
      "id": 30,
      "question": "Message passing IPC requires more processing overhead compared to shared memory IPC.",
      "answer": true
    },
    {
      "id": 31,
      "question": "In IPC, message passing does not require a communication mechanism.",
      "answer": false
    },
    {
      "id": 32,
      "question": "Shared memory IPC is typically used when a large amount of data needs to be exchanged between processes.",
      "answer": true
    },
    {
      "id": 33,
      "question": "Message passing IPC is more complex to implement than shared memory IPC.",
      "answer": false
    },
    {
      "id": 34,
      "question": "Shared memory IPC does not require synchronization.",
      "answer": false
    },
    {
      "id": 35,
      "question": "Message passing IPC ensures better security because processes do not directly share memory.",
      "answer": true
    },
    {
      "id": 36,
      "question": "Inter-process communication is used only in real-time systems.",
      "answer": false
    },
    {
      "id": 37,
      "question": "Shared memory IPC can be used for communication between processes on different machines.",
      "answer": false
    },
    {
      "id": 38,
      "question": "Synchronization issues in shared memory IPC can be resolved using locks or semaphores.",
      "answer": true
    },
    {
      "id": 39,
      "question": "A phone call is an example of synchronous message passing IPC.",
      "answer": true
    },
    {
      "id": 40,
      "question": "An email is an example of synchronous message passing IPC.",
      "answer": false
    }
]
  